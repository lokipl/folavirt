#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import os
import sys
import socket
import commands
from ConfigParser import ConfigParser

from folavirt.disks.iscsi.Partitions import Partitions
from folavirt.disks.iscsi.Configuration import Configuration
from folavirt.console.Colors import Colors

class Tgt():
    def __init__(self):
        self.conf = Configuration()
        
        # Parsowanie pliku konfiguracyjnego
        config = ConfigParser()
        config.readfp(open("../etc/folavirt.ini"))
        
        # Ustawianie pliku konfiguracyjnego TGT
        self.conffilepath = config.get("tgt","file")
    
    def reload(self):
        """
        Przeładowywuje TGT
        """
        (status, output) = commands.getstatusoutput("tgt-admin -c " + self.conffilepath + " --update ALL -f")
        if status == 0:
            print(Colors.setgreen(" * ") + u"Odświeżono stan iscsid")
        else:
            print(Colors.setred(" * ") + u"Błąd podczas odświeżania iscsid")
            print(Colors.setred(" * ") + u"Output: " + str(output).decode('utf-8'))
    
    def writeConfig(self):
        """
        Zapisuje konfigurację do pliku
        
        @param void
        @return void
        """
        # Sprawdzanie uprawnień do pliku
        if not os.access(self.conffilepath, os.R_OK | os.W_OK):
            print(Colors.setred(" * ") + u"Nie masz uprawnień do zapisu")
            sys.exit(1)
        
        # Otwieranie pliku i zapis
        conffile = open(self.conffilepath, "w")
        conffile.write(self.getFreshConfig())
        conffile.close()        
        
        print(Colors.setgreen(" * ") + u"Zmodyfikowano " + Colors.setbold(self.conffilepath))
        
        self.reload()
#         (status, output) = commands.getstatusoutput("tgt-admin -c " + self.conffilepath + " --update ALL -f")
#         if (status == 0):
#             print(Colors.setgreen(" * ") + u"Odświeżono stan iscsid")
#         else:
#             print(Colors.setred(" * ") + u"Błąd podczas odświeżania iscsid")
#             print(Colors.setred(" * ") + u"Output: " + output)
    
    def _getiqn(self):
        """
        Generuje IQN, bez nazwy zasobu
        
        @param void
        @return String
        """
        return "iqn." + self.conf.getIqndate() + "." + self.conf.getIqnhostname() + ":"
    
    def getFreshConfig(self):
        """
        Zwraca konfiguracją dla TGT
        
        @param void
        @return String
        """
        config = "# Automatically generated by " + sys.argv[0] + " on " + socket.gethostname() + "\n\n"
        config += "default-driver iscsi\n\n"
        
        # Konfiguracja dla dysków bazowych
        i = 1
        config += "<target " + self._getiqn() + self.conf.getIqnbasename() + ">\n"
        for base in Partitions().getBaseList():
            storetype = "direct-store"
            # Jeśli obraz ma już jakiś snapshot należy go zdefiniować jako backing-store
            if len(base.getSnapshots()) > 0:
                storetype = "backing-store"
            
            config += "\t<" + storetype + " /dev/" + base.getVolumeGroup() + "/" + base.getName() + ">\n"
            config += "\t\tlun " + str(i) + "\n"
            config += "\t</" + storetype + ">\n\n"
            i = i + 1
            
        config += "\twrite-cache off\n"
        config += "</target>\n\n"
        
        # Konfiguracja Snapshotów
        for base in Partitions().getBaseList():
            config += "<target " + self._getiqn() + "snapshots_" + base.getName() + ">\n"
            lun = 1
            for snapshot in base.getSnapshots():
                config += "\t<backing-store " + snapshot.getDevice() + ">\n"
                config += "\t\tlun " + str(lun) + "\n"
                config += "\t</backing-store>\n"
                lun = lun + 1
            
            config += "\n\twrite-cache off\n"
            config += "</target>\n\n"

        return config
